diff --git a/src/Makefile b/src/Makefile
index e4f7d90..7faacb4 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -117,7 +117,7 @@ endif
 
 FINAL_CFLAGS=$(STD) $(WARN) $(OPT) $(DEBUG) $(CFLAGS) $(REDIS_CFLAGS)
 FINAL_LDFLAGS=$(LDFLAGS) $(REDIS_LDFLAGS) $(DEBUG)
-FINAL_LIBS=-lm
+FINAL_LIBS=-lm -lhartebeest -lscot
 DEBUG=-g -ggdb
 
 # Linux ARM32 needs -latomic at linking time
diff --git a/src/server.c b/src/server.c
index b0cef88..a1a23a7 100644
--- a/src/server.c
+++ b/src/server.c
@@ -70,6 +70,15 @@
 #include <sys/sysctl.h>
 #endif
 
+// Scot-Redis Integration
+#include "../../../src/includes/scot-core-c.h"
+#include "../../../src/sample/scot-balance-rule-c.h"
+
+#include <pthread.h>
+
+pthread_mutex_t call_lock = PTHREAD_MUTEX_INITIALIZER;
+int ts_handle;
+
 /* Our shared "common" objects */
 
 struct sharedObjectsStruct shared;
@@ -1167,6 +1176,9 @@ int serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {
     UNUSED(id);
     UNUSED(clientData);
 
+    // Scot-Redis Integration
+    pthread_mutex_lock(&call_lock);
+
     /* Software watchdog: deliver the SIGALRM that will reach the signal
      * handler if we don't return here fast enough. */
     if (server.watchdog_period) watchdogScheduleSignal(server.watchdog_period);
@@ -1420,6 +1432,9 @@ int serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {
                           0,
                           &ei);
 
+    // Scot-Redis Integration
+    pthread_mutex_unlock(&call_lock);
+
     server.cronloops++;
     return 1000/server.hz;
 }
@@ -3282,6 +3297,8 @@ void call(client *c, int flags) {
     uint64_t client_old_flags = c->flags;
     struct redisCommand *real_cmd = c->realcmd;
 
+    pthread_mutex_lock(&call_lock);
+
     /* Initialization: clear the flags that must be set by the command on
      * demand, and initialize the array for additional commands propagation. */
     c->flags &= ~(CLIENT_FORCE_AOF|CLIENT_FORCE_REPL|CLIENT_PREVENT_PROP);
@@ -3480,6 +3497,8 @@ void call(client *c, int flags) {
     }
 
     server.core_propagates = prev_core_propagates;
+
+    pthread_mutex_unlock(&call_lock);
 }
 
 /* Used when a command that is ready for execution needs to be rejected, due to
@@ -6780,6 +6799,18 @@ int main(int argc, char **argv) {
     int j;
     char config_from_stdin = 0;
 
+    // Scot-Redis Integration
+    scot_initialize();
+
+    rule_balance_init_c(scot_get_qs());
+
+    scot_add_rule(2, rule_balance_2_c);
+    scot_add_rule(3, rule_balance_3_c);
+
+    scot_update_active(3);
+
+    ts_handle = scot_timestamp_init("scot-redis");
+
 #ifdef REDIS_TEST
     if (argc >= 3 && !strcasecmp(argv[1], "test")) {
         int flags = 0;
